00000010000000000000001010010011    // addi x5 x0 32
00000011011100000000001100010011    // addi x6 x0 55
00000000001000000000001110010011    // addi x7 x0 2
00000000011000101111010000110011    // and x8 x5 x6
11111111111100101111010000010011    // andi x8 x5 -1
00000000011000101100010010110011    // xor x9 x5 x6
00000000011000101000010100110011    // add x10 x5 x6
01000000011000110000010110110011    // sub x11 x6 x6
00000000100000000010001000100011    // sw x8 4(x0)
00000000100100000010010000100011    // sw x9 8(x0)
00000000011101000001001110110011    // sll x7 x8 x7
00000000001101000001001110010011    // slli x7 x8 3
00000000011101000010001110110011    // slt x7 x8 x7
00000000001101000010001110010011    // slti x7 x8 3
00000000010000000010010010000011    // lw x9 4(x0)
00000100100001001111100100010011    // andi x18 x9 72
00000000100000000010101000000011    // lw x20 8(x0)
00000000000010100001010001100011    // bne x20 x0 8 <rep>
00000100100001001111100100010011    // andi x18 x9 72
00000100100001001111100100010011    // andi x18 x9 72
11111110000010100000111011100011    // beq x20 x0 -4 <rep>
00000001010000000000000001101111    // jal x0 0x68 <EXIT>
11111110000010100100101011100011    // blt x20 x0 -12 <rep>
00010001000100000000001100010011    // addi x6 x0 273
00000001001000000000001100010011    // addi x6 x0 18
00000000000000001000000111100111    // jalr x3 x1 0
11111111100111111111000011101111    // jal x1 0x60 <new>
11111110000010100101000011100011    // bge x20 x0 -32 <rep>
00000010001000000000001100010011    // addi x6 x0 34
